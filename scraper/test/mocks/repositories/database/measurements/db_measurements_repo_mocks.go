// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/repositories/database/measurements/interface.go

// Package dbmeasurementsmocks is a generated GoMock package.
package dbmeasurementsmocks

import (
	entities "TPBDM/scraper/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateMeasurement mocks base method.
func (m *MockRepository) CreateMeasurement(measurement entities.Measurement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeasurement", measurement)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMeasurement indicates an expected call of CreateMeasurement.
func (mr *MockRepositoryMockRecorder) CreateMeasurement(measurement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeasurement", reflect.TypeOf((*MockRepository)(nil).CreateMeasurement), measurement)
}

// GetMeasurementCitiesList mocks base method.
func (m *MockRepository) GetMeasurementCitiesList(query entities.MeasurementsQueryContract) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurementCitiesList", query)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeasurementCitiesList indicates an expected call of GetMeasurementCitiesList.
func (mr *MockRepositoryMockRecorder) GetMeasurementCitiesList(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurementCitiesList", reflect.TypeOf((*MockRepository)(nil).GetMeasurementCitiesList), query)
}

// GetMeasurementLocationsList mocks base method.
func (m *MockRepository) GetMeasurementLocationsList(query entities.MeasurementsQueryContract) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurementLocationsList", query)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeasurementLocationsList indicates an expected call of GetMeasurementLocationsList.
func (mr *MockRepositoryMockRecorder) GetMeasurementLocationsList(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurementLocationsList", reflect.TypeOf((*MockRepository)(nil).GetMeasurementLocationsList), query)
}

// GetMeasurementParametersList mocks base method.
func (m *MockRepository) GetMeasurementParametersList(query entities.MeasurementsQueryContract) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurementParametersList", query)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeasurementParametersList indicates an expected call of GetMeasurementParametersList.
func (mr *MockRepositoryMockRecorder) GetMeasurementParametersList(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurementParametersList", reflect.TypeOf((*MockRepository)(nil).GetMeasurementParametersList), query)
}

// GetMeasurementsList mocks base method.
func (m *MockRepository) GetMeasurementsList(query entities.MeasurementsQueryContract) ([]entities.Measurement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurementsList", query)
	ret0, _ := ret[0].([]entities.Measurement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeasurementsList indicates an expected call of GetMeasurementsList.
func (mr *MockRepositoryMockRecorder) GetMeasurementsList(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurementsList", reflect.TypeOf((*MockRepository)(nil).GetMeasurementsList), query)
}
